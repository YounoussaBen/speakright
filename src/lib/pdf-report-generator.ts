// src/lib/pdf-report-generator.ts
import { SessionData } from '@/stores/session-store';
import { PageSizes, PDFDocument, rgb } from 'pdf-lib';
import { LOGO_BASE_64 } from './logo';
interface ReportOptions {
  includeAudio?: boolean;
  includeWordBreakdown?: boolean;
  includeSuggestions?: boolean;
}

export class PDFReportGenerator {
  /**
   * Generate a comprehensive pronunciation assessment report
   */
  static async generateReport(
    session: SessionData,
    options: ReportOptions = {}
  ): Promise<Uint8Array> {
    const { includeWordBreakdown = true, includeSuggestions = true } = options;

    // Create a new PDF document
    const pdfDoc = await PDFDocument.create();

    // Set document metadata
    pdfDoc.setTitle('Pronunciation Assessment Report');
    pdfDoc.setAuthor('SpeakRight AI');
    pdfDoc.setSubject('Pronunciation Analysis Results');
    pdfDoc.setCreationDate(new Date());

    // Add pages
    await this.addCoverPage(pdfDoc, session);
    await this.addSummaryPage(pdfDoc, session);

    if (includeWordBreakdown) {
      await this.addWordBreakdownPage(pdfDoc, session);
    }

    if (includeSuggestions) {
      await this.addSuggestionsPage(pdfDoc, session);
    }

    // Serialize the PDF document to bytes
    return pdfDoc.save();
  }

  /**
   * Add cover page
   */
  private static async addCoverPage(pdfDoc: PDFDocument, session: SessionData) {
    const page = pdfDoc.addPage(PageSizes.A4);
    const { width, height } = page.getSize();

    // Colors
    const primaryBlue = rgb(0.2, 0.4, 0.8);
    const darkGray = rgb(0.2, 0.2, 0.2);
    const lightGray = rgb(0.6, 0.6, 0.6);

    // Title
    page.drawText('Pronunciation Assessment Report', {
      x: 50,
      y: height - 100,
      size: 24,
      color: primaryBlue,
    });

    try {
      // Remove the data URL prefix and decode
      const base64Data = LOGO_BASE_64.replace(
        /^data:image\/[a-z]+;base64,/,
        ''
      );
      const logoBytes = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));

      const logoImage = await pdfDoc.embedPng(logoBytes);

      // Calculate scaled dimensions
      const maxWidth = 100;
      const maxHeight = 60;
      const imageAspectRatio = logoImage.width / logoImage.height;

      let logoWidth = maxWidth;
      let logoHeight = maxWidth / imageAspectRatio;

      // If height is too large, scale by height instead
      if (logoHeight > maxHeight) {
        logoHeight = maxHeight;
        logoWidth = maxHeight * imageAspectRatio;
      }

      // Draw the logo centered in the allocated space
      const logoX = width - 150 + (100 - logoWidth) / 2;
      const logoY = height - 120 + (60 - logoHeight) / 2;

      page.drawImage(logoImage, {
        x: logoX,
        y: logoY,
        width: logoWidth,
        height: logoHeight,
      });
    } catch (error) {
      console.warn(
        'Could not load logo from base64, using placeholder:',
        error
      );
    }

    // Session info
    const sessionInfo = [
      `Generated: ${new Date().toLocaleDateString()}`,
      `Session Date: ${session.createdAt.toLocaleDateString()}`,
      `Duration: ${this.formatDuration(session.metadata.duration)}`,
      `Words: ${session.metadata.wordCount}`,
    ];

    sessionInfo.forEach((info, index) => {
      page.drawText(info, {
        x: 50,
        y: height - 180 - index * 25,
        size: 12,
        color: darkGray,
      });
    });

    // Overall score (large display)
    const overallScore = session.assessment.overallScore;
    const scoreColor = this.getScoreColor(overallScore);

    page.drawText('Overall Score', {
      x: 50,
      y: height - 350,
      size: 18,
      color: darkGray,
    });

    page.drawText(`${overallScore}%`, {
      x: 50,
      y: height - 400,
      size: 48,
      color: scoreColor,
    });

    // Score interpretation
    const interpretation = this.getScoreInterpretation(overallScore);
    page.drawText(interpretation, {
      x: 50,
      y: height - 440,
      size: 14,
      color: lightGray,
    });

    // Add footer
    page.drawText(
      'Generated by SpeakRight AI - Pronunciation Training Platform',
      {
        x: 50,
        y: 50,
        size: 10,
        color: lightGray,
      }
    );
  }

  /**
   * Add summary page with scores and charts
   */
  private static async addSummaryPage(
    pdfDoc: PDFDocument,
    session: SessionData
  ) {
    const page = pdfDoc.addPage(PageSizes.A4);
    const { height } = page.getSize();

    const primaryBlue = rgb(0.2, 0.4, 0.8);
    const darkGray = rgb(0.2, 0.2, 0.2);
    const lightGray = rgb(0.6, 0.6, 0.6);

    // Header
    page.drawText('Assessment Summary', {
      x: 50,
      y: height - 50,
      size: 20,
      color: primaryBlue,
    });

    // Scores section
    const scores = [
      { label: 'Overall Score', value: session.assessment.overallScore },
      { label: 'Accuracy Score', value: session.assessment.accuracyScore },
      { label: 'Fluency Score', value: session.assessment.fluencyScore },
    ];

    scores.forEach((score, index) => {
      const yPos = height - 120 - index * 80;

      // Score label
      page.drawText(score.label, {
        x: 50,
        y: yPos,
        size: 14,
        color: darkGray,
      });

      // Score value
      page.drawText(`${score.value}%`, {
        x: 200,
        y: yPos,
        size: 14,
        color: this.getScoreColor(score.value),
      });

      // Progress bar
      const barWidth = 200;
      const barHeight = 20;

      // Background bar
      page.drawRectangle({
        x: 300,
        y: yPos - 5,
        width: barWidth,
        height: barHeight,
        color: rgb(0.9, 0.9, 0.9),
      });

      // Progress bar
      page.drawRectangle({
        x: 300,
        y: yPos - 5,
        width: (barWidth * score.value) / 100,
        height: barHeight,
        color: this.getScoreColor(score.value),
      });
    });

    // Original text section
    page.drawText('Original Text:', {
      x: 50,
      y: height - 400,
      size: 14,
      color: darkGray,
    });

    // Wrap text
    const originalText = session.originalText;
    const wrappedOriginal = this.wrapText(originalText, 65);

    wrappedOriginal.forEach((line, index) => {
      page.drawText(line, {
        x: 50,
        y: height - 430 - index * 15,
        size: 10,
        color: lightGray,
      });
    });

    // Transcribed text section
    const transcribedStartY = height - 430 - wrappedOriginal.length * 15 - 30;

    page.drawText('Transcribed Text:', {
      x: 50,
      y: transcribedStartY,
      size: 14,
      color: darkGray,
    });

    const transcribedText = session.transcribedText;
    const wrappedTranscribed = this.wrapText(transcribedText, 65);

    wrappedTranscribed.forEach((line, index) => {
      page.drawText(line, {
        x: 50,
        y: transcribedStartY - 30 - index * 15,
        size: 10,
        color: lightGray,
      });
    });
  }

  /**
   * Add detailed word breakdown page
   */
  private static async addWordBreakdownPage(
    pdfDoc: PDFDocument,
    session: SessionData
  ) {
    const page = pdfDoc.addPage(PageSizes.A4);
    const { width, height } = page.getSize();

    const primaryBlue = rgb(0.2, 0.4, 0.8);
    const darkGray = rgb(0.2, 0.2, 0.2);
    const lightGray = rgb(0.6, 0.6, 0.6);

    // Header
    page.drawText('Word-Level Analysis', {
      x: 50,
      y: height - 50,
      size: 20,
      color: primaryBlue,
    });

    // Table header
    const headers = ['Original', 'Transcribed', 'Score', 'Feedback'];
    const columnWidths = [120, 120, 60, 200];
    let xPos = 50;

    headers.forEach((header, index) => {
      page.drawText(header, {
        x: xPos,
        y: height - 90,
        size: 12,
        color: darkGray,
      });
      xPos += columnWidths[index] || 0;
    });

    // Draw header line
    page.drawLine({
      start: { x: 50, y: height - 100 },
      end: { x: width - 50, y: height - 100 },
      color: lightGray,
    });

    // Word data
    const wordData = session.assessment.wordLevelScores.slice(0, 20); // Limit to prevent overflow

    wordData.forEach((word, index) => {
      const yPos = height - 120 - index * 25;
      xPos = 50;

      // Original word
      page.drawText(word.originalWord, {
        x: xPos,
        y: yPos,
        size: 10,
        color: darkGray,
      });
      xPos += columnWidths[0] || 0;

      // Transcribed word
      page.drawText(word.word || '(not recognized)', {
        x: xPos,
        y: yPos,
        size: 10,
        color: word.word ? darkGray : rgb(0.8, 0.2, 0.2),
      });
      xPos += columnWidths[1] || 0;

      // Score
      page.drawText(`${word.score}%`, {
        x: xPos,
        y: yPos,
        size: 10,
        color: this.getScoreColor(word.score),
      });
      xPos += columnWidths[2] || 0;

      // Feedback (first item only, truncated)
      const feedback = word.feedback[0] || 'Good pronunciation';
      const truncatedFeedback =
        feedback.length > 25 ? feedback.substring(0, 25) + '...' : feedback;

      page.drawText(truncatedFeedback, {
        x: xPos,
        y: yPos,
        size: 8,
        color: lightGray,
      });
    });

    // Statistics summary
    const statsY = Math.max(100, height - 140 - wordData.length * 25 - 50);

    page.drawText('Statistics:', {
      x: 50,
      y: statsY,
      size: 14,
      color: darkGray,
    });

    const correctWords = wordData.filter(w => w.score >= 80).length;
    const totalWords = wordData.length;
    const accuracy = Math.round((correctWords / totalWords) * 100);

    const stats = [
      `Words Analyzed: ${totalWords}`,
      `Correctly Pronounced: ${correctWords}`,
      `Word-Level Accuracy: ${accuracy}%`,
    ];

    stats.forEach((stat, index) => {
      page.drawText(stat, {
        x: 70,
        y: statsY - 30 - index * 20,
        size: 10,
        color: lightGray,
      });
    });
  }

  /**
   * Add suggestions and improvement tips page
   */
  private static async addSuggestionsPage(
    pdfDoc: PDFDocument,
    session: SessionData
  ) {
    const page = pdfDoc.addPage(PageSizes.A4);
    const { height } = page.getSize();

    const primaryBlue = rgb(0.2, 0.4, 0.8);
    const darkGray = rgb(0.2, 0.2, 0.2);
    const lightGray = rgb(0.6, 0.6, 0.6);

    // Header
    page.drawText('Improvement Suggestions', {
      x: 50,
      y: height - 50,
      size: 20,
      color: primaryBlue,
    });

    // Suggestions list
    const suggestions = session.assessment.suggestions;

    suggestions.forEach((suggestion, index) => {
      const yPos = height - 100 - index * 40;

      // Bullet point
      page.drawText('•', {
        x: 50,
        y: yPos,
        size: 12,
        color: primaryBlue,
      });

      // Suggestion text (wrapped)
      const wrappedText = this.wrapText(suggestion, 70);
      wrappedText.forEach((line, lineIndex) => {
        page.drawText(line, {
          x: 70,
          y: yPos - lineIndex * 15,
          size: 11,
          color: darkGray,
        });
      });
    });

    // General tips section
    const tipsStartY = height - 120 - suggestions.length * 40 - 50;

    page.drawText('General Tips for Improvement:', {
      x: 50,
      y: tipsStartY,
      size: 16,
      color: primaryBlue,
    });

    const generalTips = [
      'Practice regularly for 10-15 minutes daily',
      'Record yourself reading and compare with native speakers',
      'Focus on problem sounds identified in this report',
      'Use online pronunciation dictionaries for difficult words',
      'Read aloud to improve fluency and confidence',
    ];

    generalTips.forEach((tip, index) => {
      const yPos = tipsStartY - 40 - index * 25;

      page.drawText('•', {
        x: 50,
        y: yPos,
        size: 12,
        color: primaryBlue,
      });

      page.drawText(tip, {
        x: 70,
        y: yPos,
        size: 11,
        color: darkGray,
      });
    });

    // Footer with next steps
    page.drawText('Keep practicing with SpeakRight to track your progress!', {
      x: 50,
      y: 100,
      size: 12,
      color: primaryBlue,
    });

    page.drawText('Visit app.speakright.com for more practice sessions', {
      x: 50,
      y: 80,
      size: 10,
      color: lightGray,
    });
  }

  /**
   * Helper function to get color based on score
   */
  private static getScoreColor(score: number) {
    if (score >= 85) return rgb(0.2, 0.7, 0.2); // Green
    if (score >= 70) return rgb(0.8, 0.6, 0.2); // Orange
    return rgb(0.8, 0.2, 0.2); // Red
  }

  /**
   * Get score interpretation text
   */
  private static getScoreInterpretation(score: number): string {
    if (score >= 90) return 'Excellent pronunciation!';
    if (score >= 80)
      return 'Good pronunciation with minor areas for improvement';
    if (score >= 70) return 'Fair pronunciation - practice recommended';
    if (score >= 60) return 'Needs improvement - focus on problem areas';
    return 'Significant improvement needed - regular practice essential';
  }

  /**
   * Format duration in seconds to readable format
   */
  private static formatDuration(seconds: number): string {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  /**
   * Wrap text to fit within specified character width
   */
  private static wrapText(text: string, maxWidth: number): string[] {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';

    words.forEach(word => {
      if ((currentLine + word).length <= maxWidth) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    });

    if (currentLine) lines.push(currentLine);
    return lines;
  }

  /**
   * Download the generated PDF
   */
  static async downloadReport(session: SessionData, options?: ReportOptions) {
    try {
      const pdfBytes = await this.generateReport(session, options);

      // Create blob and download
      const blob = new Blob([pdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);

      // Create download link
      const link = document.createElement('a');
      link.href = url;
      link.download = `pronunciation-report-${session.createdAt.toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Clean up
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating PDF report:', error);
      throw new Error('Failed to generate PDF report');
    }
  }
}
