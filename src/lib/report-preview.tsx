// src/components/report/report-preview.tsx
'use client';

import { Button } from '@/components/ui/button';
import { LOGO_BASE_64 } from '@/lib/logo';
import { PDFReportGenerator } from '@/lib/pdf-report-generator';
import { SessionData } from '@/stores/session-store';
import { ChevronLeft, ChevronRight, Download, X } from 'lucide-react';
import Image from 'next/image';
import { useState } from 'react';

interface ReportPreviewProps {
  session: SessionData;
  isOpen: boolean;
  onClose: () => void;
  onDownload?: () => void;
}

export function ReportPreview({
  session,
  isOpen,
  onClose,
  onDownload,
}: ReportPreviewProps) {
  const [currentPage, setCurrentPage] = useState(0);
  const [isDownloading, setIsDownloading] = useState(false);

  const handleDownload = async () => {
    setIsDownloading(true);
    try {
      await PDFReportGenerator.downloadReport(session);
      onDownload?.();
    } catch (error) {
      console.error('Error downloading report:', error);
      alert('Failed to generate report. Please try again.');
    } finally {
      setIsDownloading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 85) return '#33b333'; // Green
    if (score >= 70) return '#cc9933'; // Orange
    return '#cc3333'; // Red
  };

  const getScoreInterpretation = (score: number): string => {
    if (score >= 90) return 'Excellent pronunciation!';
    if (score >= 80)
      return 'Good pronunciation with minor areas for improvement';
    if (score >= 70) return 'Fair pronunciation - practice recommended';
    if (score >= 60) return 'Needs improvement - focus on problem areas';
    return 'Significant improvement needed - regular practice essential';
  };

  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const wrapText = (text: string, maxWidth: number): string[] => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';

    words.forEach(word => {
      if ((currentLine + word).length <= maxWidth) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    });

    if (currentLine) lines.push(currentLine);
    return lines;
  };

  // Cover Page Component
  const CoverPage = () => (
    <div
      className="h-[842px] w-[595px] bg-white p-12 text-black"
      style={{ fontFamily: 'Times, serif' }}
    >
      {/* Header with Logo */}
      <div className="mb-8 flex items-start justify-between">
        <h1 className="text-2xl font-bold" style={{ color: '#3366cc' }}>
          Pronunciation Assessment Report
        </h1>
        <div className="flex h-16 w-24 items-center justify-center">
          {/* Next.js Image does not support base64 as src directly unless it's a data URL */}
          {/* LOGO_BASE_64 should be a data URL (e.g., 'data:image/png;base64,...') */}
          {/* Unoptimized is required for data URLs */}
          {/* Fallback handled via alt text */}
          <Image
            src={LOGO_BASE_64}
            alt="SpeakRight Logo"
            width={96}
            height={64}
            className="max-h-full max-w-full object-contain"
            unoptimized
            style={{ objectFit: 'contain' }}
          />
        </div>
      </div>

      {/* Session Info */}
      <div className="mb-16 space-y-6" style={{ color: '#333333' }}>
        <div className="text-sm">
          Generated: {new Date().toLocaleDateString()}
        </div>
        <div className="text-sm">
          Session Date: {session.createdAt.toLocaleDateString()}
        </div>
        <div className="text-sm">
          Duration: {formatDuration(session.metadata.duration)}
        </div>
        <div className="text-sm">Words: {session.metadata.wordCount}</div>
      </div>

      {/* Overall Score */}
      <div className="mb-8">
        <h2 className="mb-4 text-lg" style={{ color: '#333333' }}>
          Overall Score
        </h2>
        <div
          className="mb-4 text-5xl font-bold"
          style={{ color: getScoreColor(session.assessment.overallScore) }}
        >
          {session.assessment.overallScore}%
        </div>
        <div className="text-sm" style={{ color: '#999999' }}>
          {getScoreInterpretation(session.assessment.overallScore)}
        </div>
      </div>

      {/* Footer */}
      <div className="absolute bottom-12 text-xs" style={{ color: '#999999' }}>
        Generated by SpeakRight AI - Pronunciation Training Platform
      </div>
    </div>
  );

  // Summary Page Component
  const SummaryPage = () => {
    const scores = [
      { label: 'Overall Score', value: session.assessment.overallScore },
      { label: 'Accuracy Score', value: session.assessment.accuracyScore },
      { label: 'Fluency Score', value: session.assessment.fluencyScore },
    ];

    const wrappedOriginal = wrapText(session.originalText, 65);
    const wrappedTranscribed = wrapText(session.transcribedText, 65);

    return (
      <div
        className="h-[842px] w-[595px] bg-white p-12 text-black"
        style={{ fontFamily: 'Times, serif' }}
      >
        {/* Header */}
        <h1 className="mb-8 text-xl font-bold" style={{ color: '#3366cc' }}>
          Assessment Summary
        </h1>

        {/* Scores Section */}
        <div className="mb-12 space-y-8">
          {scores.map((score, index) => (
            <div key={index} className="flex items-center">
              {/* Score Label */}
              <div className="w-32 text-sm" style={{ color: '#333333' }}>
                {score.label}
              </div>

              {/* Score Value */}
              <div
                className="w-16 text-sm font-bold"
                style={{ color: getScoreColor(score.value) }}
              >
                {score.value}%
              </div>

              {/* Progress Bar */}
              <div className="ml-8 w-48">
                <div className="h-5 rounded bg-gray-200">
                  <div
                    className="h-5 rounded transition-all duration-300"
                    style={{
                      width: `${score.value}%`,
                      backgroundColor: getScoreColor(score.value),
                    }}
                  />
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Original Text Section */}
        <div className="mb-8">
          <h3 className="mb-3 text-sm font-bold" style={{ color: '#333333' }}>
            Original Text:
          </h3>
          <div className="space-y-1">
            {wrappedOriginal.map((line, index) => (
              <div key={index} className="text-xs" style={{ color: '#999999' }}>
                {line}
              </div>
            ))}
          </div>
        </div>

        {/* Transcribed Text Section */}
        <div>
          <h3 className="mb-3 text-sm font-bold" style={{ color: '#333333' }}>
            Transcribed Text:
          </h3>
          <div className="space-y-1">
            {wrappedTranscribed.map((line, index) => (
              <div key={index} className="text-xs" style={{ color: '#999999' }}>
                {line}
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  // Word Breakdown Page Component
  const WordBreakdownPage = () => {
    const wordData = session.assessment.wordLevelScores.slice(0, 20);
    const correctWords = wordData.filter(w => w.score >= 80).length;
    const totalWords = wordData.length;
    const accuracy = Math.round((correctWords / totalWords) * 100);

    return (
      <div
        className="h-[842px] w-[595px] bg-white p-12 text-black"
        style={{ fontFamily: 'Times, serif' }}
      >
        {/* Header */}
        <h1 className="mb-8 text-xl font-bold" style={{ color: '#3366cc' }}>
          Word-Level Analysis
        </h1>

        {/* Table Header */}
        <div className="mb-2 flex border-b border-gray-300 pb-2">
          <div className="w-28 text-xs font-bold" style={{ color: '#333333' }}>
            Original
          </div>
          <div className="w-28 text-xs font-bold" style={{ color: '#333333' }}>
            Transcribed
          </div>
          <div className="w-16 text-xs font-bold" style={{ color: '#333333' }}>
            Score
          </div>
          <div
            className="flex-1 text-xs font-bold"
            style={{ color: '#333333' }}
          >
            Feedback
          </div>
        </div>

        {/* Word Data Rows */}
        <div className="mb-8 space-y-2">
          {wordData.map((word, index) => (
            <div key={index} className="flex items-center">
              <div className="w-28 text-xs" style={{ color: '#333333' }}>
                {word.originalWord}
              </div>
              <div
                className="w-28 text-xs"
                style={{ color: word.word ? '#333333' : '#cc3333' }}
              >
                {word.word || '(not recognized)'}
              </div>
              <div
                className="w-16 text-xs"
                style={{ color: getScoreColor(word.score) }}
              >
                {word.score}%
              </div>
              <div className="flex-1 text-xs" style={{ color: '#999999' }}>
                {word.feedback[0]
                  ? word.feedback[0].length > 25
                    ? word.feedback[0].substring(0, 25) + '...'
                    : word.feedback[0]
                  : 'Good pronunciation'}
              </div>
            </div>
          ))}
        </div>

        {/* Statistics */}
        <div>
          <h3 className="mb-4 text-sm font-bold" style={{ color: '#333333' }}>
            Statistics:
          </h3>
          <div className="ml-4 space-y-2">
            <div className="text-xs" style={{ color: '#999999' }}>
              Words Analyzed: {totalWords}
            </div>
            <div className="text-xs" style={{ color: '#999999' }}>
              Correctly Pronounced: {correctWords}
            </div>
            <div className="text-xs" style={{ color: '#999999' }}>
              Word-Level Accuracy: {accuracy}%
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Suggestions Page Component
  const SuggestionsPage = () => {
    const generalTips = [
      'Practice regularly for 10-15 minutes daily',
      'Record yourself reading and compare with native speakers',
      'Focus on problem sounds identified in this report',
      'Use online pronunciation dictionaries for difficult words',
      'Read aloud to improve fluency and confidence',
    ];

    return (
      <div
        className="h-[842px] w-[595px] bg-white p-12 text-black"
        style={{ fontFamily: 'Times, serif' }}
      >
        {/* Header */}
        <h1 className="mb-8 text-xl font-bold" style={{ color: '#3366cc' }}>
          Improvement Suggestions
        </h1>

        {/* Suggestions List */}
        <div className="mb-12 space-y-6">
          {session.assessment.suggestions.map((suggestion, index) => {
            const wrappedText = wrapText(suggestion, 70);
            return (
              <div key={index} className="flex">
                <div
                  className="mr-4 text-sm font-bold"
                  style={{ color: '#3366cc' }}
                >
                  •
                </div>
                <div className="space-y-1">
                  {wrappedText.map((line, lineIndex) => (
                    <div
                      key={lineIndex}
                      className="text-xs"
                      style={{ color: '#333333' }}
                    >
                      {line}
                    </div>
                  ))}
                </div>
              </div>
            );
          })}
        </div>

        {/* General Tips */}
        <div className="mb-8">
          <h2 className="mb-6 text-base font-bold" style={{ color: '#3366cc' }}>
            General Tips for Improvement:
          </h2>
          <div className="space-y-4">
            {generalTips.map((tip, index) => (
              <div key={index} className="flex">
                <div
                  className="mr-4 text-sm font-bold"
                  style={{ color: '#3366cc' }}
                >
                  •
                </div>
                <div className="text-xs" style={{ color: '#333333' }}>
                  {tip}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Footer */}
        <div className="absolute bottom-24 space-y-2">
          <div className="text-sm font-bold" style={{ color: '#3366cc' }}>
            Keep practicing with SpeakRight to track your progress!
          </div>
          <div className="text-xs" style={{ color: '#999999' }}>
            Visit app.speakright.com for more practice sessions
          </div>
        </div>
      </div>
    );
  };

  const pages = [
    <CoverPage key="cover" />,
    <SummaryPage key="summary" />,
    <WordBreakdownPage key="breakdown" />,
    <SuggestionsPage key="suggestions" />,
  ];

  const pageTitles = ['Cover', 'Summary', 'Word Analysis', 'Suggestions'];

  if (!isOpen) return null;

  return (
    <div className="bg-opacity-75 fixed inset-0 z-50 flex items-center justify-center bg-black p-4">
      <div className="flex h-[95vh] w-full max-w-6xl flex-col rounded-2xl bg-gray-100 shadow-2xl">
        {/* Header */}
        <div className="flex items-center justify-between border-b border-gray-300 bg-white p-4">
          <div className="flex items-center space-x-4">
            <h2 className="text-lg font-semibold text-gray-900">
              Report Preview - {pageTitles[currentPage]}
            </h2>
            <div className="text-sm text-gray-600">
              Page {currentPage + 1} of {pages.length}
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}
              disabled={currentPage === 0}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() =>
                setCurrentPage(Math.min(pages.length - 1, currentPage + 1))
              }
              disabled={currentPage === pages.length - 1}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
            <Button
              onClick={handleDownload}
              disabled={isDownloading}
              className="flex items-center space-x-2"
            >
              <Download className="h-4 w-4" />
              <span>{isDownloading ? 'Generating...' : 'Download PDF'}</span>
            </Button>
            <button
              onClick={onClose}
              className="rounded-lg p-2 text-gray-500 transition-colors hover:bg-gray-100"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>

        {/* PDF Preview Content */}
        <div className="flex-1 overflow-auto bg-gray-200 p-8">
          <div className="mx-auto flex justify-center">
            <div className="shadow-2xl">{pages[currentPage]}</div>
          </div>
        </div>

        {/* Page Navigation */}
        <div className="border-t border-gray-300 bg-white p-4">
          <div className="flex justify-center space-x-2">
            {pages.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentPage(index)}
                className={`h-3 w-3 rounded-full transition-colors ${
                  currentPage === index
                    ? 'bg-blue-600'
                    : 'bg-gray-300 hover:bg-gray-400'
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
